diff --git a/cpp/src/arrow/csv/reader.cc b/cpp/src/arrow/csv/reader.cc
index b8333b6..89a87d4 100644
--- a/cpp/src/arrow/csv/reader.cc
+++ b/cpp/src/arrow/csv/reader.cc
@@ -42,13 +42,11 @@
 #include "arrow/type.h"
 #include "arrow/type_fwd.h"
 #include "arrow/util/async_generator.h"
-#include "arrow/util/future.h"
 #include "arrow/util/iterator.h"
 #include "arrow/util/logging.h"
 #include "arrow/util/macros.h"
 #include "arrow/util/optional.h"
 #include "arrow/util/task_group.h"
-#include "arrow/util/thread_pool.h"
 #include "arrow/util/utf8.h"
 
 namespace arrow {
@@ -96,13 +94,6 @@ class CSVBufferIterator {
     return MakeTransformedIterator(std::move(buffer_iterator), fn);
   }
 
-  static AsyncGenerator<std::shared_ptr<Buffer>> MakeAsync(
-      AsyncGenerator<std::shared_ptr<Buffer>> buffer_iterator) {
-    Transformer<std::shared_ptr<Buffer>, std::shared_ptr<Buffer>> fn =
-        CSVBufferIterator();
-    return MakeTransformedGenerator(std::move(buffer_iterator), fn);
-  }
-
   Result<TransformFlow<std::shared_ptr<Buffer>>> operator()(std::shared_ptr<Buffer> buf) {
     if (buf == nullptr) {
       // EOF
@@ -179,6 +170,26 @@ class BlockReader {
   bool trailing_cr_ = false;
 };
 
+class OldBlockReader {
+ public:
+  OldBlockReader(std::unique_ptr<Chunker> chunker,
+              Iterator<std::shared_ptr<Buffer>> buffer_iterator,
+              std::shared_ptr<Buffer> first_buffer)
+      : chunker_(std::move(chunker)),
+        buffer_iterator_(std::move(buffer_iterator)),
+        partial_(std::make_shared<Buffer>("")),
+        buffer_(std::move(first_buffer)) {}
+
+ protected:
+  std::unique_ptr<Chunker> chunker_;
+  Iterator<std::shared_ptr<Buffer>> buffer_iterator_;
+
+  std::shared_ptr<Buffer> partial_, buffer_;
+  int64_t block_index_ = 0;
+  // Whether there was a trailing CR at the end of last received buffer
+  bool trailing_cr_ = false;
+};
+
 // An object that reads delimited CSV blocks for serial use.
 // The number of bytes consumed should be notified after each read,
 // using CSVBlock::consume_bytes.
@@ -236,66 +247,45 @@ class SerialBlockReader : public BlockReader {
   }
 };
 
-// An object that reads delimited CSV blocks for threaded use.
-class ThreadedBlockReader : public BlockReader {
+class OldSerialBlockReader : public OldBlockReader {
  public:
-  using BlockReader::BlockReader;
-
-  static Iterator<CSVBlock> MakeIterator(
-      Iterator<std::shared_ptr<Buffer>> buffer_iterator, std::unique_ptr<Chunker> chunker,
-      std::shared_ptr<Buffer> first_buffer) {
-    auto block_reader =
-        std::make_shared<ThreadedBlockReader>(std::move(chunker), first_buffer);
-    // Wrap shared pointer in callable
-    Transformer<std::shared_ptr<Buffer>, CSVBlock> block_reader_fn =
-        [block_reader](std::shared_ptr<Buffer> next) { return (*block_reader)(next); };
-    return MakeTransformedIterator(std::move(buffer_iterator), block_reader_fn);
-  }
-
-  static AsyncGenerator<CSVBlock> MakeAsyncIterator(
-      AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator,
-      std::unique_ptr<Chunker> chunker, std::shared_ptr<Buffer> first_buffer) {
-    auto block_reader =
-        std::make_shared<ThreadedBlockReader>(std::move(chunker), first_buffer);
-    // Wrap shared pointer in callable
-    Transformer<std::shared_ptr<Buffer>, CSVBlock> block_reader_fn =
-        [block_reader](std::shared_ptr<Buffer> next) { return (*block_reader)(next); };
-    return MakeTransformedGenerator(std::move(buffer_generator), block_reader_fn);
-  }
+  using OldBlockReader::OldBlockReader;
 
-  Result<TransformFlow<CSVBlock>> operator()(std::shared_ptr<Buffer> next_buffer) {
+  Result<arrow::util::optional<CSVBlock>> Next() {
     if (buffer_ == nullptr) {
       // EOF
-      return TransformFinish();
+      return util::optional<CSVBlock>();
     }
 
-    std::shared_ptr<Buffer> whole, completion, next_partial;
+    std::shared_ptr<Buffer> next_buffer, completion;
+    ARROW_ASSIGN_OR_RAISE(next_buffer, buffer_iterator_.Next());
     bool is_final = (next_buffer == nullptr);
 
-    auto current_partial = std::move(partial_);
-    auto current_buffer = std::move(buffer_);
-
     if (is_final) {
       // End of file reached => compute completion from penultimate block
-      RETURN_NOT_OK(
-          chunker_->ProcessFinal(current_partial, current_buffer, &completion, &whole));
+      RETURN_NOT_OK(chunker_->ProcessFinal(partial_, buffer_, &completion, &buffer_));
     } else {
       // Get completion of partial from previous block.
-      std::shared_ptr<Buffer> starts_with_whole;
-      // Get completion of partial from previous block.
-      RETURN_NOT_OK(chunker_->ProcessWithPartial(current_partial, current_buffer,
-                                                 &completion, &starts_with_whole));
-
-      // Get a complete CSV block inside `partial + block`, and keep
-      // the rest for the next iteration.
-      RETURN_NOT_OK(chunker_->Process(starts_with_whole, &whole, &next_partial));
+      RETURN_NOT_OK(
+          chunker_->ProcessWithPartial(partial_, buffer_, &completion, &buffer_));
     }
+    int64_t bytes_before_buffer = partial_->size() + completion->size();
 
-    partial_ = std::move(next_partial);
-    buffer_ = std::move(next_buffer);
+    auto consume_bytes = [this, bytes_before_buffer,
+                          next_buffer](int64_t nbytes) -> Status {
+      DCHECK_GE(nbytes, 0);
+      auto offset = nbytes - bytes_before_buffer;
+      if (offset < 0) {
+        // Should not happen
+        return Status::Invalid("CSV parser got out of sync with chunker");
+      }
+      partial_ = SliceBuffer(buffer_, offset);
+      buffer_ = next_buffer;
+      return Status::OK();
+    };
 
-    return TransformYield<CSVBlock>(
-        CSVBlock{current_partial, completion, whole, block_index_++, is_final, {}});
+    return CSVBlock{partial_,       completion, buffer_,
+                    block_index_++, is_final,   std::move(consume_bytes)};
   }
 };
 
@@ -504,10 +494,6 @@ class BaseTableReader : public ReaderMixin, public csv::TableReader {
 
   virtual Status Init() = 0;
 
-  Future<std::shared_ptr<Table>> ReadAsync() override {
-    return Future<std::shared_ptr<Table>>::MakeFinished(Read());
-  }
-
  protected:
   // Make column builders from conversion schema
   Status MakeColumnBuilders() {
@@ -778,11 +764,7 @@ class SerialTableReader : public BaseTableReader {
     ARROW_ASSIGN_OR_RAISE(auto istream_it,
                           io::MakeInputStreamIterator(input_, read_options_.block_size));
 
-    // Since we're converting serially, no need to readahead more than one block
-    int32_t block_queue_size = 1;
-    ARROW_ASSIGN_OR_RAISE(auto rh_it,
-                          MakeReadaheadIterator(std::move(istream_it), block_queue_size));
-    buffer_iterator_ = CSVBufferIterator::Make(std::move(rh_it));
+    buffer_iterator_ = CSVBufferIterator::Make(std::move(istream_it));
     return Status::OK();
   }
 
@@ -797,22 +779,21 @@ class SerialTableReader : public BaseTableReader {
     RETURN_NOT_OK(ProcessHeader(first_buffer, &first_buffer));
     RETURN_NOT_OK(MakeColumnBuilders());
 
-    auto block_iterator = SerialBlockReader::MakeIterator(std::move(buffer_iterator_),
-                                                          MakeChunker(parse_options_),
-                                                          std::move(first_buffer));
+    OldSerialBlockReader block_reader(MakeChunker(parse_options_),
+                                   std::move(buffer_iterator_), std::move(first_buffer));
     while (true) {
       RETURN_NOT_OK(io_context_.stop_token().Poll());
 
-      ARROW_ASSIGN_OR_RAISE(auto maybe_block, block_iterator.Next());
-      if (IsIterationEnd(maybe_block)) {
+      ARROW_ASSIGN_OR_RAISE(auto maybe_block, block_reader.Next());
+      if (!maybe_block.has_value()) {
         // EOF
         break;
       }
       ARROW_ASSIGN_OR_RAISE(
           int64_t parsed_bytes,
-          ParseAndInsert(maybe_block.partial, maybe_block.completion, maybe_block.buffer,
-                         maybe_block.block_index, maybe_block.is_final));
-      RETURN_NOT_OK(maybe_block.consume_bytes(parsed_bytes));
+          ParseAndInsert(maybe_block->partial, maybe_block->completion, maybe_block->buffer,
+                         maybe_block->block_index, maybe_block->is_final));
+      RETURN_NOT_OK(maybe_block->consume_bytes(parsed_bytes));
     }
     // Finish conversion, create schema and table
     RETURN_NOT_OK(task_group_->Finish());
@@ -823,122 +804,13 @@ class SerialTableReader : public BaseTableReader {
   Iterator<std::shared_ptr<Buffer>> buffer_iterator_;
 };
 
-class AsyncThreadedTableReader
-    : public BaseTableReader,
-      public std::enable_shared_from_this<AsyncThreadedTableReader> {
- public:
-  using BaseTableReader::BaseTableReader;
-
-  AsyncThreadedTableReader(io::IOContext io_context,
-                           std::shared_ptr<io::InputStream> input,
-                           const ReadOptions& read_options,
-                           const ParseOptions& parse_options,
-                           const ConvertOptions& convert_options, Executor* cpu_executor)
-      : BaseTableReader(std::move(io_context), input, read_options, parse_options,
-                        convert_options),
-        cpu_executor_(cpu_executor) {}
-
-  ~AsyncThreadedTableReader() override {
-    if (task_group_) {
-      // In case of error, make sure all pending tasks are finished before
-      // we start destroying BaseTableReader members
-      ARROW_UNUSED(task_group_->Finish());
-    }
-  }
-
-  Status Init() override {
-    ARROW_ASSIGN_OR_RAISE(auto istream_it,
-                          io::MakeInputStreamIterator(input_, read_options_.block_size));
-
-    int max_readahead = cpu_executor_->GetCapacity();
-    int readahead_restart = std::max(1, max_readahead / 2);
-
-    ARROW_ASSIGN_OR_RAISE(
-        auto bg_it, MakeBackgroundGenerator(std::move(istream_it), io_context_.executor(),
-                                            max_readahead, readahead_restart));
-
-    auto transferred_it = MakeTransferredGenerator(bg_it, cpu_executor_);
-    buffer_generator_ = CSVBufferIterator::MakeAsync(std::move(transferred_it));
-    return Status::OK();
-  }
-
-  Result<std::shared_ptr<Table>> Read() override { return ReadAsync().result(); }
-
-  Future<std::shared_ptr<Table>> ReadAsync() override {
-    task_group_ =
-        internal::TaskGroup::MakeThreaded(cpu_executor_, io_context_.stop_token());
-
-    auto self = shared_from_this();
-    return ProcessFirstBuffer().Then([self](std::shared_ptr<Buffer> first_buffer) {
-      auto block_generator = ThreadedBlockReader::MakeAsyncIterator(
-          self->buffer_generator_, MakeChunker(self->parse_options_),
-          std::move(first_buffer));
-
-      std::function<Status(CSVBlock)> block_visitor =
-          [self](CSVBlock maybe_block) -> Status {
-        // The logic in VisitAsyncGenerator ensures that we will never be
-        // passed an empty block (visit does not call with the end token) so
-        // we can be assured maybe_block has a value.
-        DCHECK_GE(maybe_block.block_index, 0);
-        DCHECK(!maybe_block.consume_bytes);
-
-        // Launch parse task
-        self->task_group_->Append([self, maybe_block] {
-          return self
-              ->ParseAndInsert(maybe_block.partial, maybe_block.completion,
-                               maybe_block.buffer, maybe_block.block_index,
-                               maybe_block.is_final)
-              .status();
-        });
-        return Status::OK();
-      };
-
-      return VisitAsyncGenerator(std::move(block_generator), block_visitor)
-          .Then([self](...) -> Future<> {
-            // By this point we've added all top level tasks so it is safe to call
-            // FinishAsync
-            return self->task_group_->FinishAsync();
-          })
-          .Then([self](...) -> Result<std::shared_ptr<Table>> {
-            // Finish conversion, create schema and table
-            return self->MakeTable();
-          });
-    });
-  }
-
- protected:
-  Future<std::shared_ptr<Buffer>> ProcessFirstBuffer() {
-    // First block
-    auto first_buffer_future = buffer_generator_();
-    return first_buffer_future.Then([this](const std::shared_ptr<Buffer>& first_buffer)
-                                        -> Result<std::shared_ptr<Buffer>> {
-      if (first_buffer == nullptr) {
-        return Status::Invalid("Empty CSV file");
-      }
-      std::shared_ptr<Buffer> first_buffer_processed;
-      RETURN_NOT_OK(ProcessHeader(first_buffer, &first_buffer_processed));
-      RETURN_NOT_OK(MakeColumnBuilders());
-      return first_buffer_processed;
-    });
-  }
-
-  Executor* cpu_executor_;
-  AsyncGenerator<std::shared_ptr<Buffer>> buffer_generator_;
-};
-
 Result<std::shared_ptr<TableReader>> MakeTableReader(
     MemoryPool* pool, io::IOContext io_context, std::shared_ptr<io::InputStream> input,
     const ReadOptions& read_options, const ParseOptions& parse_options,
     const ConvertOptions& convert_options) {
   std::shared_ptr<BaseTableReader> reader;
-  if (read_options.use_threads) {
-    auto cpu_executor = internal::GetCpuThreadPool();
-    reader = std::make_shared<AsyncThreadedTableReader>(
-        io_context, input, read_options, parse_options, convert_options, cpu_executor);
-  } else {
     reader = std::make_shared<SerialTableReader>(io_context, input, read_options,
                                                  parse_options, convert_options);
-  }
   RETURN_NOT_OK(reader->Init());
   return reader;
 }
@@ -980,8 +852,7 @@ Result<std::shared_ptr<StreamingReader>> StreamingReader::Make(
     const ReadOptions& read_options, const ParseOptions& parse_options,
     const ConvertOptions& convert_options) {
   auto io_context = io::IOContext(pool);
-  auto cpu_executor = internal::GetCpuThreadPool();
-  return MakeStreamingReader(io_context, std::move(input), cpu_executor, read_options,
+  return MakeStreamingReader(io_context, std::move(input), nullptr, read_options,
                              parse_options, convert_options);
 }
 
@@ -989,8 +860,7 @@ Result<std::shared_ptr<StreamingReader>> StreamingReader::Make(
     io::IOContext io_context, std::shared_ptr<io::InputStream> input,
     const ReadOptions& read_options, const ParseOptions& parse_options,
     const ConvertOptions& convert_options) {
-  auto cpu_executor = internal::GetCpuThreadPool();
-  return MakeStreamingReader(io_context, std::move(input), cpu_executor, read_options,
+  return MakeStreamingReader(io_context, std::move(input), nullptr, read_options,
                              parse_options, convert_options);
 }
 
diff --git a/cpp/src/arrow/csv/reader.h b/cpp/src/arrow/csv/reader.h
index 8e56824..3918ade 100644
--- a/cpp/src/arrow/csv/reader.h
+++ b/cpp/src/arrow/csv/reader.h
@@ -25,8 +25,6 @@
 #include "arrow/result.h"
 #include "arrow/type.h"
 #include "arrow/type_fwd.h"
-#include "arrow/util/future.h"
-#include "arrow/util/thread_pool.h"
 #include "arrow/util/visibility.h"
 
 namespace arrow {
@@ -43,8 +41,6 @@ class ARROW_EXPORT TableReader {
 
   /// Read the entire CSV file and convert it to a Arrow Table
   virtual Result<std::shared_ptr<Table>> Read() = 0;
-  /// Read the entire CSV file and convert it to a Arrow Table
-  virtual Future<std::shared_ptr<Table>> ReadAsync() = 0;
 
   /// Create a TableReader instance
   static Result<std::shared_ptr<TableReader>> Make(io::IOContext io_context,
